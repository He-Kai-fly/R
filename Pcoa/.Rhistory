geneIDannotation()
#source("https://bioconductor.org/biocLite.R")
#biocLite('org.Hs.eg.db')
#基因的entrez ID 跟symbol等其它ID的转换程序
geneIDannotation <- function(geneLists=c(1,2,9),name=T,map=T,ensemble=F,accnum=F){
## input ID type : So far I just accept entrezID or symbol
## default, we will annotate the entrezID and symbol, chromosone location and gene name
suppressMessages(library("org.Hs.eg.db"))
all_EG=mappedkeys(org.Hs.egSYMBOL)
EG2Symbol=toTable(org.Hs.egSYMBOL)
if( all(! geneLists %in% all_EG) ){
inputType='symbol'
geneLists=data.frame(symbol=geneLists)
results=merge(geneLists,EG2Symbol,by='symbol',all.x=T)
}else{
inputType='entrezID'
geneLists=data.frame(gene_id=geneLists)
results=merge(geneLists,EG2Symbol,by='gene_id',all.x=T)
}
if ( name ){
EG2name=toTable(org.Hs.egGENENAME)
results=merge(results,EG2name,by='gene_id',all.x=T)
}
if(map){
EG2MAP=toTable(org.Hs.egMAP)
results=merge(results,EG2MAP,by='gene_id',all.x=T)
}
if(ensemble){
EG2ENSEMBL=toTable(org.Hs.egENSEMBL)
results=merge(results,EG2ENSEMBL,by='gene_id',all.x=T)
}
if(accnum){
EG2accnum=toTable(org.Hs.egREFSEQ)
results=merge(results,EG2MAP,by='gene_id',all.x=T)
}
return(results)
}
geneIDannotation()
geneIDannotation(c('TP53','BRCA1','KRAS','YEAO'))
#source("https://bioconductor.org/biocLite.R")
#biocLite('org.Hs.eg.db')
#基因的entrez ID 跟symbol等其它ID的转换程序
keytypes(org.Hs.eg.db)
ensids <- c("ENSG00000130720", "ENSG00000103257", "ENSG00000156414",
"ENSG00000144644", "ENSG00000159307", "ENSG00000144485")
cols <- c("SYMBOL", "GENENAME")
select(org.Hs.eg.db, keys=ensids, columns=cols, keytype="ENSEMBL")
select(org.Hs.eg.db, keys="BRCA1", columns=c("ENSEMBL","UNIGENE","ENTREZID","CHR","GO","GENENAME"), keytype="SYMBOL")
library(multcomp)
attach(cholesterol)
table(trt)
View(geneIDannotation)
trt
ibrary(mygene)
install.packages(mygene)
biocLite('mygene')
library(mygene)
res<-query('NM_030621', fields='go', species='human')$hits
lapply(res, as.list)
View(res)
library(gdata)
library(ggplot2)
library(ggpubr)
library(agricolae)
library(vegan)
head(iris)
attach(iris)
df <- iris[,c(1,2,3)]
head(df)
df <- subset(iris,select = c(1,2,4:5))
View(df)
atttibutes(iris)
attributes(iris)
class(iris)
colnames(iris)
rownames(iris)
print(iris)
head(iris)
print(iris)
rownames(iris)
iris[1,3]
head(iris)
iris[2,3]
iris[4,3]
iris[4,4]
iris[1,1]
head(iris)
dim(iris)
head(iris)
df <- subset(iris,select = c(1,2,4:5))
summary(iris)
iris_1 <- (iris[,-5])
View(iris_1)
head(apply(iris_1,1,mean))
head(apply(iris_1,2
,mean))
View(iris_1)
apply(iris_1,2
,mean)
apply(iris_1,1
,mean)
apply(iris_1,1,mean)
iris_1 <- (iris[1:5,-5])
iris_1 <- (iris[1:6,-5])
apply(iris_1,1,mean)
apply(iris_1,2,mean,na.rm = TRUE)
tab
ab <- apply(iris_1,2,function(x){x/sum(x)})
View(ab)
ab <- apply(iris_1[,1:ncol(tab)-1],2,function(x){x/sum(x)})
ab <- apply(iris_1[,1:ncol(iris_1)-1],2,function(x){x/sum(x)})
View(ab)
ab1 <- iris_1[apply(ab,1,max)>0.01,]
View(ab1)
View(ab)
View(ab1)
View(ab)
View(ab1)
View(ab)
apply(iris_1,1,mean)
apply(iris_1,2,mean,na.rm = TRUE)
apply(iris_1,1,mean,na.rm = TRUE)
apply(iris_1,2,mean)
ab <- apply(iris_1,2,function(x){x/sum(x)})
View(ab)
View(ab)
ab1 <- iris_1[apply(ab,1,max)>0.01,]
View(ab1)
View(ab)
View(ab1)
tab perc<-apply(tab,2,function(x){x/sum(x)})
ab <- apply(iris_1,2,function(x){x/sum(x)})
View(ab)
ab1 <- iris_1[apply(ab,1,max)>0.01,]
View(ab1)
View(ab)
summary(iris)
apply(iris_1,1,mean)
apply(iris,2,mean)
apply(iris,2,mean,na.rm = TRUE)
apply(iris_1,1,mean,na.rm = TRUE)
View(iris_1)
iris_1 <- (iris[,-5])
View(iris_1)
apply(iris_1,2,mean)
summary(iris)
`1` <- read.csv("~/1.png", sep="")
View(`1`)
ab <- apply(iris_1,2,function(x){x/sum(x)})
View(ab)
ab1 <- iris_1[apply(ab,1,max)>0.01,]
View(ab1)
ab2 <- iris_1[apply(ab,1,min)>0.01,]
View(ab2)
ab1 <- iris_1[apply(ab,1,max)>0.001,]
ab1 <- iris_1[apply(ab,1,max)>0.1,]
ab1 <- iris_1[apply(ab,1,max)>0.001,]
hk <- apply(ab1,2,function(x){x/sum(x)})
View(hk)
ab1 <- iris_1[apply(ab,1,max)>0.01,]
hk <- apply(ab1,2,function(x){x/sum(x)})
View(hk)
summary(hk)
apply(hk,2,sum)
ab2 <- iris_1[apply(ab,1,min)>0.01,]
ab2 <- iris_1[apply(ab,1,min)>0.1,]
ab2 <- iris_1[apply(ab,1,min)>0.001,]
ab2 <- iris_1[apply(ab,1,min)>0.01,]
library(statmod)
Data.filter(data, order.type = “sample”, minReads = 1000, numTaxa = 10,
perTaxa = NULL)
filter_Buty
qplot(carat,data=diamonds.geom = "histogram")
qplot(carat,data=diamonds,geom = "histogram")
qplot(carat,data = diamonds,geom = "histogram")
qplot(carat,data = diamonds,geom = "histogram")
library((splines))
library(splines)
qplot(carat,data = diamonds,geom = "histogram")
boxplot(write * female,data=hsb2demo, main="High School
Students Data", xlab="Gender", ylab="Writing score by gender")
boxplot(write~female,data=hsb2demo, main="High School
Students Data", xlab="Gender", ylab="Writing score by gender")
qplot(x=mpg, y=wt, data=df, geom = "point")
library(ggplot2)
qplot(x=mpg, y=wt, data=df, geom = "point")
ggplot(data=df, aes(x=mpg, y=wt))+   geom_point()
ggplot(data=df, aes(x=mpg, y=wt))+   geom_point()
ggplot(mpg, aes(x=mpg, y=wt))+   geom_point()
df <- mtcars[, c("mpg","cyl","wt")]
ggplot(df, aes(x=mpg, y=wt))+   geom_point()
View(df)
library(reshape2)
df_melt <- melt(df)
View(df)
View(df_melt)
boxplot(df_melt)
boxplot(df)
qplot()
qplot(sex, weight, data = wdata, geom = "violin")
demo(graphics)
pdf("mygraph. pdf")
attach(mtcars)
plot(wt, mpg)
abline(1m(mpg~wt))
title("Regression of MPG on Weight")
plot(dose,drug,type = b)
dose <- c(20,30,50)
drug <- c(16,20,30)
plot(dose,drug,type = b)
plot(dose,drug,type = b)
plot(dose,drug,type = "b")
plot
plot(dose,drug,type = "b")
attach(mtcars)
opar <-par(no. readonly=TRUE)
par(mfrow=c(2,2))
plot(wt, mpg, main="Scatterplot of wt vs. mpg")
plot(wt, disp, main="Scatterplot of wt vs disp")
hist(wt, main="Histogram of wt")
boxplot(wt, main="Boxplot of wt")
par(opar)
detach(mtcars)
hist(mtcars$mpg,breaks=10)
hist(mtcars$mpg,breaks=10)
exp(2)
log(4,base = 2)
mydata <- (rnorm=(30),nrow=6)
mydata <- matrix(rnorm=(30),nrow=6)
mydata <- matrix(rnorm=(30),nrow=6)
mydata <- matrix(rnorm=(30), nrow=6)
ehkai <- matrix(rnorm(30),nrow = 6)
View(ehkai)
ehkai <- as.data.frame(ehkai)
View(ehkai)
apply(ehkai,1,sum)
he <- apply(ehkai,1,sum)
str(ehkai)
str(he)
class(he)
options(digits = 2)
ehkai <- rbind(ehekai,he)
ehkai <- rbind(ehkai,he)
View(ehkai)
ehkai <- cbind(ehkai,he)
for (i in 1:10) print("HELLO")
he <- apply(ehkai,1,sd)
ehkai <- rbind(ehkai,he)
View(ehkai)
attach(mtcars)
aggdata <- aggregate(mtcars,by=list(cyl,gear),FUN=mean,na.rm=TRUE)
mtcars
View(aggdata)
View(aggdata)
describe(mtcars[vars])
describe
library(psych)
describe(mtcars[vars])
mtcars
describe(mtcars[mpg])
vars <- c("mpg","hp"."wt")
vars <- c("mpg","hp","wt")
head(mtcars[vars])
describe(mtcars[vars])
head(mtcars[mpg])
head(mtcars[1])
vars <- c("1")
head(mtcars[vars])
library('VennDiagram')
x <- c(1,3,5,7,9,11,17,19,21,23,25,29,31,33,37,39,41,47,49,51,57,59)
y <- c(1,3,5,7,13,17,19,21,23,25,27,29,31,33,45,47,51)
z <- c(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,55,57,59,61)
venn.diagram(list(X=x,Y=y,Z=z),fill=c("red","blue","yellow"),"out.tiff")
len(x)
length(x)
library(ggplot2) # This example uses the ChickWeight dataset, which comes with ggplot2
# First plot
p1 <- ggplot(ChickWeight, aes(x=Time, y=weight, colour=Diet, group=Chick)) + geom_line() + ggtitle("Growth curve for individual chicks")
# Second plot
p2 <- ggplot(ChickWeight, aes(x=Time, y=weight, colour=Diet)) + geom_point(alpha=.3) + geom_smooth(alpha=.2, size=1) + ggtitle("Fitted growth curve per diet")
# Third plot
p3 <- ggplot(subset(ChickWeight, Time==21), aes(x=weight, colour=Diet)) + geom_density() + ggtitle("Final weight, by diet")
# Fourth plot
p4 <- ggplot(subset(ChickWeight, Time==21), aes(x=weight, fill=Diet)) + geom_histogram(colour="black", binwidth=50) + facet_grid(Diet ~ .) + ggtitle("Final weight, by diet") + theme(legend.position="none") # No legend (redundant in this graph)
multiplot(p1, p2, p3, p4, cols=2)
p4
p3
multiplot(p1, p2, p3, p4, cols=2)
# First plot
ChickWeight
p1
92
p2
# Second plot
p2 <- ggplot(ChickWeight, aes(x=Time, y=weight, colour=Diet)) + geom_point(alpha=.3) + geom_smooth(alpha=.2, size=1) + ggtitle("Fitted growth curve per diet")+theme_classic()
p2
# Fourth plot
p4 <- ggplot(subset(ChickWeight, Time==21), aes(x=weight, fill=Diet)) + geom_histogram(colour="black", binwidth=50) + facet_grid(Diet ~ .) + ggtitle("Final weight, by diet") + theme(legend.position="none") # No legend (redundant in this graph)
p4
multiplot(p1, p2, p3, p4, cols=2)
# First plot
ChickWeight
# Fourth plot
he <- subset(ChickWeight,Time==21)
View(he)
# First plot
ChickWeight
# Fourth plot
he <- subset(ChickWeight,Time==5)
View(he)
# First plot
ChickWeight
# Fourth plot
he <- subset(ChickWeight,Time==4)
View(he)
attach(iris)
df <- data.frame(Sepal.Width, Petal.Length, Petal.Width)
View(df)
detach(iris)
df <- data.frame(Sepal.Width, Petal.Length, Petal.Width)
attach(iris)
df <- data.frame(Sepal.Width, Petal.Length, Petal.Width)
View(df)
detach(iris)
df <- data.frame(Sepal.Width, Petal.Length, Petal.Width)
library(statnet)
library(circlize)
rm(list = ls())
setwd('E:/Study/Bioinformation/Script/NMDS')#输入丰度表
genu <- read.delim('Genus.txt',row.names = 1,sep = '\t',header = T,stringsAsFactors = FALSE)
library(pheatmap)
library(ggplot2)
library(vegan)
library(permute)
library(lattice)
genu <- as.matrix(genu)
drows <- vegdist(genu,method = "bray")
dcols <- vegdist(t(genu),method = "bray")
pdf(file="heatmap.pdf",width = 10,height = 10)
pheatmap(genu,cellwidth = NA, cellheight = NA, treeheight_row = 50, treeheight_col = 50
,color = colorRampPalette(c("green", "black","red"))(100),
scale ="row", legend = TRUE,border_color = NA,
fontsize_row = 8, fontsize_col = 10,clustering_distance_rows = drows,
clustering_distance_cols = dcols, clustering_method ="average",main ="Heatmap")
pheatmap(genu,cellwidth = NA, cellheight = NA, treeheight_row = 50, treeheight_col = 50
,color = colorRampPalette(c("green", "black","red"))(100),
scale ="row", legend = TRUE,border_color = NA,
fontsize_row = 8, fontsize_col = 10,clustering_distance_rows = drows,
clustering_distance_cols = dcols, clustering_method ="average",main ="Heatmap"，filename="E:/pheatmap_1.pdf")
pheatmap(genu,cellwidth = NA, cellheight = NA, treeheight_row = 50, treeheight_col = 50
,color = colorRampPalette(c("green", "black","red"))(100),
scale ="row", legend = TRUE,border_color = NA,
fontsize_row = 8, fontsize_col = 10,clustering_distance_rows = drows,
clustering_distance_cols = dcols, clustering_method ="average",main ="Heatmap",filename="E:/pheatmap_1.pdf")
pheatmap(genu,cellwidth = NA, cellheight = NA, treeheight_row = 50, treeheight_col = 50
,color = colorRampPalette(c("gold", "white","yellow"))(100),
scale ="row", legend = TRUE,border_color = NA,
fontsize_row = 8, fontsize_col = 10,clustering_distance_rows = drows,
clustering_distance_cols = dcols, clustering_method ="average",main ="Heatmap",filename="E:/pheatmap_1.pdf")
pheatmap(genu,cellwidth = NA, cellheight = NA, treeheight_row = 50, treeheight_col = 50
,color = colorRampPalette(c("gold", "white","yellow"))(100),
scale ="row", legend = TRUE,border_color = NA,
fontsize_row = 8, fontsize_col = 10,clustering_distance_rows = drows,
clustering_distance_cols = dcols, clustering_method ="average",main ="Heatmap",filename="E:/pheatmap_1.pdf")
pheatmap(genu,cellwidth = NA, cellheight = NA, treeheight_row = 50, treeheight_col = 50
,color = colorRampPalette(c("green", "black","red"))(100),
scale ="row", legend = TRUE,border_color = NA,
fontsize_row = 8, fontsize_col = 10,clustering_distance_rows = drows,
clustering_distance_cols = dcols, clustering_method ="average",main ="Heatmap",filename="E:/pheatmap_1.pdf")
pheatmap(genu,cellwidth = NA, cellheight = NA, treeheight_row = 50, treeheight_col = 50
,color = colorRampPalette(c("green", "black","red"))(100),
scale ="row", legend = TRUE,border_color = NA,
fontsize_row = 8, fontsize_col = 10,clustering_distance_rows = drows,
clustering_distance_cols = dcols, clustering_method ="average",main ="Heatmap",filename="E:/pheatmap_1.pdf")
data_ori <- "Grp_1;Grp_2;Grp_3;Grp_4;Grp_5
a;6.6;20.9;100.1;600.0;5.2
b;20.8;99.8;700.0;3.7;19.2
c;100.0;800.0;6.2;21.4;98.6
d;900;3.3;20.3;101.1;10000"
dt = data.frame(obj = c('A','D','B','E','C'), val = c(2,15,6,9,7))
data <- read.table(text=data_ori, header=T, row.names=1, sep=";", quote="")
pheatmap::pheatmap(data, scale="row", cluster_rows=TRUE, cluster_cols=FALSE)
row_anno = data.frame(type=c("TF","Enzyme","Enzyme","TF"), row.names=rownames(data))
row_anno
col_anno = data.frame(grp=c("A","A","A","B","B"), size=1:5, row.names=colnames(data))
col_anno
pheatmap::pheatmap(data, scale="row",
cluster_rows=FALSE,
annotation_col=col_anno,
annotation_row=row_anno,
color=colorRampPalette(c('green','yellow','red'), bias=1)(50),
filename="E:/pheatmap_1.pdf")
pheatmap::pheatmap(data, scale="row",
cluster_rows=FALSE,
annotation_col=col_anno,
annotation_row=row_anno,
color=colorRampPalette(c('green','black','red'), bias=1)(50),
filename="E:/pheatmap_1.pdf")
library(vegan)
library(ggplot2)
library(plyr)
setwd("E:/Study/Bioinformation/Script/Pcoa")
rm(list = ls())
setwd("E:/Study/Bioinformation/Script/Pcoa")
library(vegan)
library(ggplot2)
library(plyr)
##读入文件
#OTU 丰度表
otu <- read.delim('otu_table.txt', row.names = 1, sep = '\t', stringsAsFactors = F, check.names = F)
otu <- data.frame(t(otu))
#或者现有的距离矩阵
dis <- read.delim('bray.txt', row.names = 1, sep = '\t', stringsAsFactors = F, check.names = F)
View(dis)
z <- matrix(1:20,ncol = 5,nrow = 4)
g <- c(1,2,3,4,5)
d <- as.matrix(dist(z))
rm(list = ls())
setwd("E:/Study/Bioinformation/Script/Pcoa")
library(vegan)
library(ggplot2)
library(plyr)
##读入文件
#OTU 丰度表
otu <- read.delim('otu_table.txt', row.names = 1, sep = '\t', stringsAsFactors = F, check.names = F)
otu <- data.frame(t(otu))
otu.ja <- vegadist(otu,"jac",bianry="TRUE")
library(vegan)
otu.ja <- vegadist(otu,"jac",bianry="TRUE")
otu.ja <- vegdist(otu,"jac",bianry="TRUE")
OTU.bc <- vegdist(otu,"bray")
write.csv((as.matrix(OTU.bc),"otubc1.csv"))
write.csv((as.matrix(OTU.bc),"otubc1.csv")
write.csv((as.matrix(OTU.bc),"otubc1.csv")
write.csv((as.matrix(OTU.bc),'otu.csv')
otu.BC <- as.matrix(OTU.bc)
View(otu.BC)
View(otu)
View(otu.BC)
dir(otu)
dim(otu)
write.csv(as.matrix(OTU.bc),'otu.bc')
rm(list = ls())
setwd("E:/Study/Bioinformation/Script/Pcoa")
library(vegan)
library(ggplot2)
library(plyr)
##读入文件
#OTU 丰度表
otu <- read.delim('otu_table.txt', row.names = 1, sep = '\t', stringsAsFactors = F, check.names = F)
otu <- data.frame(t(otu))#另可选择需要的行数和列数
#或者现有的距离矩阵
dis <- read.delim('bray.txt', row.names = 1, sep = '\t', stringsAsFactors = F, check.names = F)
#样本分组文件
group <- read.delim('group.txt', sep = '\t', stringsAsFactors = F)
##PCoA 排序
#排序（基于 OTU 丰度表）
distance <- vegdist(otu, method = 'bray')
?vegdist
pcoa <- cmdscale(distance, k = (nrow(otu) - 1), eig = T)
#可简要查看结果
ordiplot(scores(pcoa)[ ,c(1, 2)], type = 't')
write.csv(as.matrix(distance), 'distance.csv', quote = F)
#可简要查看结果
ordiplot(scores(pcoa)[ ,c(1, 2)], type = 't')
#或者查看排序简要
summary(pcoa)
#可简要查看结果
ordiplot(scores(pcoa)[ ,c(1,2)], type = 't')
#查看主要排序轴的特征值和各样本在各排序轴中的坐标值
pcoa$eig
point <- data.frame(pcoa$point)
#可使用 wascores() 计算物种坐标
species <- wascores(pcoa$points[,1:2], otu)
#坐标轴解释量（前两轴）
pcoa_eig <- (pcoa$eig)[1:2] / sum(pcoa$eig)
#提取样本点坐标（前两轴）
sample_site <- data.frame({pcoa$point})[1:2]
sample_site$names <- rownames(sample_site)
names(sample_site)[1:2] <- c('PCoA1', 'PCoA2')
#为样本点坐标添加分组信息
sample_site <- merge(sample_site, group, by = 'names', all.x = T)
#使用 ggplot2 绘制 PCoA 排序图
sample_site$site <- factor(sample_site$site, levels = c('A', 'B', 'C', 'D'))
sample_site$deal <- factor(sample_site$deal, levels = c('low', 'high'))
sample_site$time <- factor(sample_site$time, levels = c('1', '2', '3', '4'))
group_border <- ddply(sample_site, 'site', function(df) df[chull(df[[2]], df[[3]]), ]) #注：group_border 作为下文 geom_polygon() 的做图数据使用
pcoa_plot <- ggplot(sample_site, aes(PCoA1, PCoA2, group = site)) +
theme(panel.grid = element_line(color = 'gray', linetype = 2, size = 0.1), panel.background = element_rect(color = 'black', fill = 'transparent'), legend.key = element_rect(fill = 'transparent')) + #去掉背景框
geom_vline(xintercept = 0, color = 'gray', size = 0.4) +
geom_hline(yintercept = 0, color = 'gray', size = 0.4) +
geom_polygon(data = group_border, aes(fill = site)) + #绘制多边形区域
geom_point(aes(color = time, shape = deal), size = 1.5, alpha = 0.8) + #可在这里修改点的透明度、大小
scale_shape_manual(values = c(17, 16)) + #可在这里修改点的形状
scale_color_manual(values = c('yellow', 'orange', 'red', 'red4')) + #可在这里修改点的颜色
scale_fill_manual(values = c('#C673FF2E', '#73D5FF2E', '#49C35A2E', '#FF985C2E')) + #可在这里修改区块的颜色
guides(fill = guide_legend(order = 1), shape = guide_legend(order = 2), color = guide_legend(order = 3)) + #设置图例展示顺序
labs(x = paste('PCoA axis1: ', round(100 * pcoa_eig[1], 2), '%'), y = paste('PCoA axis2: ', round(100 * pcoa_eig[2], 2), '%')) +
#可通过修改下面四句中的点坐标、大小、颜色等，修改“A、B、C、D”标签
annotate('text', label = 'A', x = -0.31, y = -0.15, size = 5, colour = '#C673FF') +
annotate('text', label = 'B', x = -0.1, y = 0.3, size = 5, colour = '#73D5FF') +
annotate('text', label = 'C', x = 0.1, y = 0.15, size = 5, colour = '#49C35A') +
annotate('text', label = 'D', x = 0.35, y = 0, size = 5, colour = '#FF985C')
#ggsave('PCoA.pdf', pcoa_plot, width = 6, height = 5)
ggsave('PCoA.png', pcoa_plot, width = 6, height = 5)
library(GUniFra)
install.packages("GUniFra")
library(ape)
library(GUniFra)
install.packages("GUniFra")
source("https://bioconductor.org/biocLite.R")
biocLite("GUniFra")
